// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: authorization_roles.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteAuthorizationRole = `-- name: DeleteAuthorizationRole :one
DELETE FROM authorization_roles
WHERE role_id = $1
RETURNING role_id, role_name, description, created_at
`

func (q *Queries) DeleteAuthorizationRole(ctx context.Context, roleID int64) (AuthorizationRole, error) {
	row := q.db.QueryRow(ctx, deleteAuthorizationRole, roleID)
	var i AuthorizationRole
	err := row.Scan(
		&i.RoleID,
		&i.RoleName,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const getAuthorizationRole = `-- name: GetAuthorizationRole :one
SELECT role_id, role_name, description, created_at
FROM authorization_roles
WHERE role_id = $1
FOR NO KEY UPDATE
`

func (q *Queries) GetAuthorizationRole(ctx context.Context, roleID int64) (AuthorizationRole, error) {
	row := q.db.QueryRow(ctx, getAuthorizationRole, roleID)
	var i AuthorizationRole
	err := row.Scan(
		&i.RoleID,
		&i.RoleName,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const insertAuthorizationRole = `-- name: InsertAuthorizationRole :one
INSERT
INTO authorization_roles
    (role_name, description)
VALUES
    ($1, $2)
RETURNING role_id, role_name, description, created_at
`

type InsertAuthorizationRoleParams struct {
	RoleName    string      `json:"role_name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) InsertAuthorizationRole(ctx context.Context, arg *InsertAuthorizationRoleParams) (AuthorizationRole, error) {
	row := q.db.QueryRow(ctx, insertAuthorizationRole, arg.RoleName, arg.Description)
	var i AuthorizationRole
	err := row.Scan(
		&i.RoleID,
		&i.RoleName,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const updateAuthorizationRole = `-- name: UpdateAuthorizationRole :one
UPDATE authorization_roles
SET
    role_name = COALESCE($2, role_name),
    description = COALESCE($3, description)
WHERE role_id = $1
RETURNING role_id, role_name, description, created_at
`

type UpdateAuthorizationRoleParams struct {
	RoleID      int64       `json:"role_id"`
	RoleName    pgtype.Text `json:"role_name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) UpdateAuthorizationRole(ctx context.Context, arg *UpdateAuthorizationRoleParams) (AuthorizationRole, error) {
	row := q.db.QueryRow(ctx, updateAuthorizationRole, arg.RoleID, arg.RoleName, arg.Description)
	var i AuthorizationRole
	err := row.Scan(
		&i.RoleID,
		&i.RoleName,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}
