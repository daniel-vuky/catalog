// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: refresh_tokens.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteRefreshToken = `-- name: DeleteRefreshToken :one
DELETE FROM refresh_tokens
WHERE customer_id = $1
RETURNING refresh_token_id, customer_id, refresh_token, user_agent, client_ip, is_blocked, expired_at, created_at
`

func (q *Queries) DeleteRefreshToken(ctx context.Context, customerID int64) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, deleteRefreshToken, customerID)
	var i RefreshToken
	err := row.Scan(
		&i.RefreshTokenID,
		&i.CustomerID,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.ExpiredAt,
		&i.CreatedAt,
	)
	return i, err
}

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT refresh_token_id, customer_id, refresh_token, user_agent, client_ip, is_blocked, expired_at, created_at
FROM refresh_tokens
WHERE customer_id = $1
`

func (q *Queries) GetRefreshToken(ctx context.Context, customerID int64) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, getRefreshToken, customerID)
	var i RefreshToken
	err := row.Scan(
		&i.RefreshTokenID,
		&i.CustomerID,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.ExpiredAt,
		&i.CreatedAt,
	)
	return i, err
}

const insertRefreshToken = `-- name: InsertRefreshToken :one
INSERT INTO refresh_tokens
    (customer_id, refresh_token, user_agent, client_ip, is_blocked, expired_at)
VALUES
    ($1, $2, $3, $4, $5, $6)
RETURNING refresh_token_id, customer_id, refresh_token, user_agent, client_ip, is_blocked, expired_at, created_at
`

type InsertRefreshTokenParams struct {
	CustomerID   int64     `json:"customer_id"`
	RefreshToken string    `json:"refresh_token"`
	UserAgent    string    `json:"user_agent"`
	ClientIp     string    `json:"client_ip"`
	IsBlocked    bool      `json:"is_blocked"`
	ExpiredAt    time.Time `json:"expired_at"`
}

func (q *Queries) InsertRefreshToken(ctx context.Context, arg *InsertRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, insertRefreshToken,
		arg.CustomerID,
		arg.RefreshToken,
		arg.UserAgent,
		arg.ClientIp,
		arg.IsBlocked,
		arg.ExpiredAt,
	)
	var i RefreshToken
	err := row.Scan(
		&i.RefreshTokenID,
		&i.CustomerID,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.ExpiredAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateRefreshToken = `-- name: UpdateRefreshToken :one
UPDATE refresh_tokens
SET
    refresh_token = COALESCE($2, refresh_token),
    user_agent = COALESCE($3, user_agent),
    client_ip = COALESCE($4, client_ip),
    is_blocked = COALESCE($5, is_blocked),
    expired_at = COALESCE($6, expired_at)
WHERE customer_id = $1
RETURNING refresh_token_id, customer_id, refresh_token, user_agent, client_ip, is_blocked, expired_at, created_at
`

type UpdateRefreshTokenParams struct {
	CustomerID   int64              `json:"customer_id"`
	RefreshToken pgtype.Text        `json:"refresh_token"`
	UserAgent    pgtype.Text        `json:"user_agent"`
	ClientIp     pgtype.Text        `json:"client_ip"`
	IsBlocked    pgtype.Bool        `json:"is_blocked"`
	ExpiredAt    pgtype.Timestamptz `json:"expired_at"`
}

func (q *Queries) UpdateRefreshToken(ctx context.Context, arg *UpdateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, updateRefreshToken,
		arg.CustomerID,
		arg.RefreshToken,
		arg.UserAgent,
		arg.ClientIp,
		arg.IsBlocked,
		arg.ExpiredAt,
	)
	var i RefreshToken
	err := row.Scan(
		&i.RefreshTokenID,
		&i.CustomerID,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.ExpiredAt,
		&i.CreatedAt,
	)
	return i, err
}
