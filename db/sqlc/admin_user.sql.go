// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: admin_user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteAdminUser = `-- name: DeleteAdminUser :one
DELETE FROM admin_users
WHERE email = $1
RETURNING admin_id, role_id, email, firstname, lastname, hashed_password, is_active, lock_expires, created_at
`

func (q *Queries) DeleteAdminUser(ctx context.Context, email string) (AdminUser, error) {
	row := q.db.QueryRow(ctx, deleteAdminUser, email)
	var i AdminUser
	err := row.Scan(
		&i.AdminID,
		&i.RoleID,
		&i.Email,
		&i.Firstname,
		&i.Lastname,
		&i.HashedPassword,
		&i.IsActive,
		&i.LockExpires,
		&i.CreatedAt,
	)
	return i, err
}

const getAdminUser = `-- name: GetAdminUser :one
SELECT admin_id, role_id, email, firstname, lastname, hashed_password, is_active, lock_expires, created_at
FROM admin_users
WHERE email = $1
FOR NO KEY UPDATE
`

func (q *Queries) GetAdminUser(ctx context.Context, email string) (AdminUser, error) {
	row := q.db.QueryRow(ctx, getAdminUser, email)
	var i AdminUser
	err := row.Scan(
		&i.AdminID,
		&i.RoleID,
		&i.Email,
		&i.Firstname,
		&i.Lastname,
		&i.HashedPassword,
		&i.IsActive,
		&i.LockExpires,
		&i.CreatedAt,
	)
	return i, err
}

const insertAdminUser = `-- name: InsertAdminUser :one
INSERT
INTO admin_users
    (email, role_id, firstname, lastname, hashed_password, is_active, lock_expires)
VALUES
    ($1, $2, $3, $4, $5, $6, $7)
RETURNING admin_id, role_id, email, firstname, lastname, hashed_password, is_active, lock_expires, created_at
`

type InsertAdminUserParams struct {
	Email          string             `json:"email"`
	RoleID         int64              `json:"role_id"`
	Firstname      string             `json:"firstname"`
	Lastname       string             `json:"lastname"`
	HashedPassword string             `json:"hashed_password"`
	IsActive       bool               `json:"is_active"`
	LockExpires    pgtype.Timestamptz `json:"lock_expires"`
}

func (q *Queries) InsertAdminUser(ctx context.Context, arg *InsertAdminUserParams) (AdminUser, error) {
	row := q.db.QueryRow(ctx, insertAdminUser,
		arg.Email,
		arg.RoleID,
		arg.Firstname,
		arg.Lastname,
		arg.HashedPassword,
		arg.IsActive,
		arg.LockExpires,
	)
	var i AdminUser
	err := row.Scan(
		&i.AdminID,
		&i.RoleID,
		&i.Email,
		&i.Firstname,
		&i.Lastname,
		&i.HashedPassword,
		&i.IsActive,
		&i.LockExpires,
		&i.CreatedAt,
	)
	return i, err
}

const updateAdminUser = `-- name: UpdateAdminUser :one
UPDATE admin_users
SET
    role_id = COALESCE($2, role_id),
    firstname = COALESCE($3, firstname),
    lastname = COALESCE($4, lastname),
    hashed_password = COALESCE($5, hashed_password),
    is_active = COALESCE($6, is_active),
    lock_expires = COALESCE($7, lock_expires)
WHERE email = $1
RETURNING admin_id, role_id, email, firstname, lastname, hashed_password, is_active, lock_expires, created_at
`

type UpdateAdminUserParams struct {
	Email          string             `json:"email"`
	RoleID         pgtype.Int8        `json:"role_id"`
	Firstname      pgtype.Text        `json:"firstname"`
	Lastname       pgtype.Text        `json:"lastname"`
	HashedPassword pgtype.Text        `json:"hashed_password"`
	IsActive       pgtype.Bool        `json:"is_active"`
	LockExpires    pgtype.Timestamptz `json:"lock_expires"`
}

func (q *Queries) UpdateAdminUser(ctx context.Context, arg *UpdateAdminUserParams) (AdminUser, error) {
	row := q.db.QueryRow(ctx, updateAdminUser,
		arg.Email,
		arg.RoleID,
		arg.Firstname,
		arg.Lastname,
		arg.HashedPassword,
		arg.IsActive,
		arg.LockExpires,
	)
	var i AdminUser
	err := row.Scan(
		&i.AdminID,
		&i.RoleID,
		&i.Email,
		&i.Firstname,
		&i.Lastname,
		&i.HashedPassword,
		&i.IsActive,
		&i.LockExpires,
		&i.CreatedAt,
	)
	return i, err
}
