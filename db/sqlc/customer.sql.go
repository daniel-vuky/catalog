// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: customer.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const getCustomer = `-- name: GetCustomer :one
SELECT customer_id, email, firstname, lastname, gender, dob, hashed_password, password_changed_at, created_at
FROM customers
WHERE email = $1
FOR NO KEY UPDATE
`

func (q *Queries) GetCustomer(ctx context.Context, email string) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomer, email)
	var i Customer
	err := row.Scan(
		&i.CustomerID,
		&i.Email,
		&i.Firstname,
		&i.Lastname,
		&i.Gender,
		&i.Dob,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const insertCustomer = `-- name: InsertCustomer :one
INSERT
INTO customers
    (email, firstname, lastname, gender, dob, hashed_password, password_changed_at)
VALUES
    ($1, $2, $3, $4, $5, $6, $7)
RETURNING customer_id, email, firstname, lastname, gender, dob, hashed_password, password_changed_at, created_at
`

type InsertCustomerParams struct {
	Email             string             `json:"email"`
	Firstname         string             `json:"firstname"`
	Lastname          string             `json:"lastname"`
	Gender            NullGender         `json:"gender"`
	Dob               pgtype.Timestamptz `json:"dob"`
	HashedPassword    string             `json:"hashed_password"`
	PasswordChangedAt time.Time          `json:"password_changed_at"`
}

func (q *Queries) InsertCustomer(ctx context.Context, arg *InsertCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, insertCustomer,
		arg.Email,
		arg.Firstname,
		arg.Lastname,
		arg.Gender,
		arg.Dob,
		arg.HashedPassword,
		arg.PasswordChangedAt,
	)
	var i Customer
	err := row.Scan(
		&i.CustomerID,
		&i.Email,
		&i.Firstname,
		&i.Lastname,
		&i.Gender,
		&i.Dob,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateCustomer = `-- name: UpdateCustomer :one
UPDATE customers
SET
    firstname = COALESCE($2, firstname),
    lastname = COALESCE($3, lastname),
    gender = COALESCE($4, gender),
    dob = COALESCE($5, dob),
    hashed_password = COALESCE($6, hashed_password),
    password_changed_at = COALESCE($7, password_changed_at)
WHERE email = $1
RETURNING customer_id, email, firstname, lastname, gender, dob, hashed_password, password_changed_at, created_at
`

type UpdateCustomerParams struct {
	Email             string             `json:"email"`
	Firstname         pgtype.Text        `json:"firstname"`
	Lastname          pgtype.Text        `json:"lastname"`
	Gender            NullGender         `json:"gender"`
	Dob               pgtype.Timestamptz `json:"dob"`
	HashedPassword    pgtype.Text        `json:"hashed_password"`
	PasswordChangedAt pgtype.Timestamptz `json:"password_changed_at"`
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg *UpdateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, updateCustomer,
		arg.Email,
		arg.Firstname,
		arg.Lastname,
		arg.Gender,
		arg.Dob,
		arg.HashedPassword,
		arg.PasswordChangedAt,
	)
	var i Customer
	err := row.Scan(
		&i.CustomerID,
		&i.Email,
		&i.Firstname,
		&i.Lastname,
		&i.Gender,
		&i.Dob,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}
