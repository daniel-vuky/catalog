// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/daniel-vuky/gogento-auth/db/sqlc (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -destination db/mock/store.go -package mockdb github.com/daniel-vuky/gogento-auth/db/sqlc Store
//

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/daniel-vuky/gogento-auth/db/sqlc"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// DeleteAdminUser mocks base method.
func (m *MockStore) DeleteAdminUser(arg0 context.Context, arg1 string) (db.AdminUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAdminUser", arg0, arg1)
	ret0, _ := ret[0].(db.AdminUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAdminUser indicates an expected call of DeleteAdminUser.
func (mr *MockStoreMockRecorder) DeleteAdminUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAdminUser", reflect.TypeOf((*MockStore)(nil).DeleteAdminUser), arg0, arg1)
}

// DeleteAuthorizationRole mocks base method.
func (m *MockStore) DeleteAuthorizationRole(arg0 context.Context, arg1 int64) (db.AuthorizationRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthorizationRole", arg0, arg1)
	ret0, _ := ret[0].(db.AuthorizationRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAuthorizationRole indicates an expected call of DeleteAuthorizationRole.
func (mr *MockStoreMockRecorder) DeleteAuthorizationRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthorizationRole", reflect.TypeOf((*MockStore)(nil).DeleteAuthorizationRole), arg0, arg1)
}

// DeleteAuthorizationRule mocks base method.
func (m *MockStore) DeleteAuthorizationRule(arg0 context.Context, arg1 int64) (db.AuthorizationRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthorizationRule", arg0, arg1)
	ret0, _ := ret[0].(db.AuthorizationRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAuthorizationRule indicates an expected call of DeleteAuthorizationRule.
func (mr *MockStoreMockRecorder) DeleteAuthorizationRule(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthorizationRule", reflect.TypeOf((*MockStore)(nil).DeleteAuthorizationRule), arg0, arg1)
}

// DeleteRefreshToken mocks base method.
func (m *MockStore) DeleteRefreshToken(arg0 context.Context, arg1 int64) (db.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRefreshToken", arg0, arg1)
	ret0, _ := ret[0].(db.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRefreshToken indicates an expected call of DeleteRefreshToken.
func (mr *MockStoreMockRecorder) DeleteRefreshToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRefreshToken", reflect.TypeOf((*MockStore)(nil).DeleteRefreshToken), arg0, arg1)
}

// GetAdminUser mocks base method.
func (m *MockStore) GetAdminUser(arg0 context.Context, arg1 string) (db.AdminUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminUser", arg0, arg1)
	ret0, _ := ret[0].(db.AdminUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminUser indicates an expected call of GetAdminUser.
func (mr *MockStoreMockRecorder) GetAdminUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminUser", reflect.TypeOf((*MockStore)(nil).GetAdminUser), arg0, arg1)
}

// GetAuthorizationRole mocks base method.
func (m *MockStore) GetAuthorizationRole(arg0 context.Context, arg1 int64) (db.AuthorizationRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizationRole", arg0, arg1)
	ret0, _ := ret[0].(db.AuthorizationRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizationRole indicates an expected call of GetAuthorizationRole.
func (mr *MockStoreMockRecorder) GetAuthorizationRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizationRole", reflect.TypeOf((*MockStore)(nil).GetAuthorizationRole), arg0, arg1)
}

// GetAuthorizationRule mocks base method.
func (m *MockStore) GetAuthorizationRule(arg0 context.Context, arg1 int64) (db.AuthorizationRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizationRule", arg0, arg1)
	ret0, _ := ret[0].(db.AuthorizationRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizationRule indicates an expected call of GetAuthorizationRule.
func (mr *MockStoreMockRecorder) GetAuthorizationRule(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizationRule", reflect.TypeOf((*MockStore)(nil).GetAuthorizationRule), arg0, arg1)
}

// GetAuthorizationRuleByRole mocks base method.
func (m *MockStore) GetAuthorizationRuleByRole(arg0 context.Context, arg1 int64) ([]db.AuthorizationRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizationRuleByRole", arg0, arg1)
	ret0, _ := ret[0].([]db.AuthorizationRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizationRuleByRole indicates an expected call of GetAuthorizationRuleByRole.
func (mr *MockStoreMockRecorder) GetAuthorizationRuleByRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizationRuleByRole", reflect.TypeOf((*MockStore)(nil).GetAuthorizationRuleByRole), arg0, arg1)
}

// GetCustomer mocks base method.
func (m *MockStore) GetCustomer(arg0 context.Context, arg1 string) (db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomer", arg0, arg1)
	ret0, _ := ret[0].(db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomer indicates an expected call of GetCustomer.
func (mr *MockStoreMockRecorder) GetCustomer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomer", reflect.TypeOf((*MockStore)(nil).GetCustomer), arg0, arg1)
}

// GetRefreshToken mocks base method.
func (m *MockStore) GetRefreshToken(arg0 context.Context, arg1 int64) (db.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshToken", arg0, arg1)
	ret0, _ := ret[0].(db.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefreshToken indicates an expected call of GetRefreshToken.
func (mr *MockStoreMockRecorder) GetRefreshToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshToken", reflect.TypeOf((*MockStore)(nil).GetRefreshToken), arg0, arg1)
}

// InsertAdminUser mocks base method.
func (m *MockStore) InsertAdminUser(arg0 context.Context, arg1 *db.InsertAdminUserParams) (db.AdminUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAdminUser", arg0, arg1)
	ret0, _ := ret[0].(db.AdminUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertAdminUser indicates an expected call of InsertAdminUser.
func (mr *MockStoreMockRecorder) InsertAdminUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAdminUser", reflect.TypeOf((*MockStore)(nil).InsertAdminUser), arg0, arg1)
}

// InsertAuthorizationRole mocks base method.
func (m *MockStore) InsertAuthorizationRole(arg0 context.Context, arg1 *db.InsertAuthorizationRoleParams) (db.AuthorizationRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAuthorizationRole", arg0, arg1)
	ret0, _ := ret[0].(db.AuthorizationRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertAuthorizationRole indicates an expected call of InsertAuthorizationRole.
func (mr *MockStoreMockRecorder) InsertAuthorizationRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAuthorizationRole", reflect.TypeOf((*MockStore)(nil).InsertAuthorizationRole), arg0, arg1)
}

// InsertAuthorizationRule mocks base method.
func (m *MockStore) InsertAuthorizationRule(arg0 context.Context, arg1 *db.InsertAuthorizationRuleParams) (db.AuthorizationRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAuthorizationRule", arg0, arg1)
	ret0, _ := ret[0].(db.AuthorizationRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertAuthorizationRule indicates an expected call of InsertAuthorizationRule.
func (mr *MockStoreMockRecorder) InsertAuthorizationRule(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAuthorizationRule", reflect.TypeOf((*MockStore)(nil).InsertAuthorizationRule), arg0, arg1)
}

// InsertCustomer mocks base method.
func (m *MockStore) InsertCustomer(arg0 context.Context, arg1 *db.InsertCustomerParams) (db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCustomer", arg0, arg1)
	ret0, _ := ret[0].(db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertCustomer indicates an expected call of InsertCustomer.
func (mr *MockStoreMockRecorder) InsertCustomer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCustomer", reflect.TypeOf((*MockStore)(nil).InsertCustomer), arg0, arg1)
}

// InsertMultipleAuthorizationRules mocks base method.
func (m *MockStore) InsertMultipleAuthorizationRules(arg0 context.Context, arg1 *db.InsertMultipleAuthorizationRulesParams) ([]db.AuthorizationRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMultipleAuthorizationRules", arg0, arg1)
	ret0, _ := ret[0].([]db.AuthorizationRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertMultipleAuthorizationRules indicates an expected call of InsertMultipleAuthorizationRules.
func (mr *MockStoreMockRecorder) InsertMultipleAuthorizationRules(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMultipleAuthorizationRules", reflect.TypeOf((*MockStore)(nil).InsertMultipleAuthorizationRules), arg0, arg1)
}

// InsertRefreshToken mocks base method.
func (m *MockStore) InsertRefreshToken(arg0 context.Context, arg1 *db.InsertRefreshTokenParams) (db.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRefreshToken", arg0, arg1)
	ret0, _ := ret[0].(db.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertRefreshToken indicates an expected call of InsertRefreshToken.
func (mr *MockStoreMockRecorder) InsertRefreshToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRefreshToken", reflect.TypeOf((*MockStore)(nil).InsertRefreshToken), arg0, arg1)
}

// IsAllowed mocks base method.
func (m *MockStore) IsAllowed(arg0 context.Context, arg1 *db.IsAllowedParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAllowed", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAllowed indicates an expected call of IsAllowed.
func (mr *MockStoreMockRecorder) IsAllowed(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAllowed", reflect.TypeOf((*MockStore)(nil).IsAllowed), arg0, arg1)
}

// UpdateAdminUser mocks base method.
func (m *MockStore) UpdateAdminUser(arg0 context.Context, arg1 *db.UpdateAdminUserParams) (db.AdminUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAdminUser", arg0, arg1)
	ret0, _ := ret[0].(db.AdminUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAdminUser indicates an expected call of UpdateAdminUser.
func (mr *MockStoreMockRecorder) UpdateAdminUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAdminUser", reflect.TypeOf((*MockStore)(nil).UpdateAdminUser), arg0, arg1)
}

// UpdateAuthorizationRole mocks base method.
func (m *MockStore) UpdateAuthorizationRole(arg0 context.Context, arg1 *db.UpdateAuthorizationRoleParams) (db.AuthorizationRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthorizationRole", arg0, arg1)
	ret0, _ := ret[0].(db.AuthorizationRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAuthorizationRole indicates an expected call of UpdateAuthorizationRole.
func (mr *MockStoreMockRecorder) UpdateAuthorizationRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthorizationRole", reflect.TypeOf((*MockStore)(nil).UpdateAuthorizationRole), arg0, arg1)
}

// UpdateAuthorizationRule mocks base method.
func (m *MockStore) UpdateAuthorizationRule(arg0 context.Context, arg1 *db.UpdateAuthorizationRuleParams) (db.AuthorizationRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthorizationRule", arg0, arg1)
	ret0, _ := ret[0].(db.AuthorizationRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAuthorizationRule indicates an expected call of UpdateAuthorizationRule.
func (mr *MockStoreMockRecorder) UpdateAuthorizationRule(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthorizationRule", reflect.TypeOf((*MockStore)(nil).UpdateAuthorizationRule), arg0, arg1)
}

// UpdateCustomer mocks base method.
func (m *MockStore) UpdateCustomer(arg0 context.Context, arg1 *db.UpdateCustomerParams) (db.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomer", arg0, arg1)
	ret0, _ := ret[0].(db.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCustomer indicates an expected call of UpdateCustomer.
func (mr *MockStoreMockRecorder) UpdateCustomer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomer", reflect.TypeOf((*MockStore)(nil).UpdateCustomer), arg0, arg1)
}

// UpdateRefreshToken mocks base method.
func (m *MockStore) UpdateRefreshToken(arg0 context.Context, arg1 *db.UpdateRefreshTokenParams) (db.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRefreshToken", arg0, arg1)
	ret0, _ := ret[0].(db.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRefreshToken indicates an expected call of UpdateRefreshToken.
func (mr *MockStoreMockRecorder) UpdateRefreshToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRefreshToken", reflect.TypeOf((*MockStore)(nil).UpdateRefreshToken), arg0, arg1)
}
